#!/bin/bash

#
# dockerhub2oci - Simple shell tool to pull from DockerHub and create an OCI image.
# Copyright (C) 2018  Oliver Freyermuth
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#

function help() {
cat <<EOF
Tool to pull an image from a docker registry and extract the contents
to a folder to be used as OCI image.

Example usage:
$0 --repo gliderlabs --image alpine --tag latest

Nvidia Cloud:
$0 --registry nvcr.io --repo tensorflow --image alpine --tag 17.10 --token $token
EOF
exit 1
}

# Ensure functions available

HERE="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

if [ ! -f "${HERE}/blob2oci" ]; then
    echo "Cannot find blob2oci, exiting."
    exit 1 
fi

# Aria2c

if ! [ -x "$(command -v aria2c)" ]; then
  echo '# Missing aria2c, install with:
sudo apt-get install aria2
sudo yum install aria2
sudo pacman -Sy aria2' >&2
  exit 1
fi

# Defaults

registry="registry.hub.docker.com"
repo="gliderlabs"
token="unset"
image="alpine"
tag="latest"

cachedir=${TMPDIR:-/tmp}/docker2oci/

writable_dirs=false

TEMP=$(getopt -o h --long repo:,image:,tag:,cachedir:,registry:,writable-dirs,help -n $0 -- "$@")
if [ $? != 0 ] ; then printHelp; exit 1; fi
eval set -- "$TEMP"
while true ; do
	case "$1" in
		--repo)          repo=$2;            shift 2;;
		--image)         image=$2;           shift 2;;
		--tag)           tag=$2;             shift 2;;
		--cachedir)      cachedir=$2;        shift 2;;
		--registry)      registry=$2;        shift 2;;
		--token)         token=$2;           shift 2;;
		--writable-dirs) writable_dirs=true; shift 1;;
		-h|--help)       help;               exit 0;;
		--)              shift;              break;;
		*) echo "Internal error!";           exit 1;;
	esac
done

mkdir -p ${cachedir}

imgroot=${repo}/${image}/${tag}
rm -rf ${imgroot}
mkdir -p ${imgroot}

img_full="${repo}/${image}"

# If the token is unset, we use default auth_uri and auth_uri full. If a 
#     different client is needed (e.g., Nvidia Cloud) this logic will be handled
#     in a calling script, and then token passed forward

if [ "${token}" == "unset" ]; then

    auth_uri="https://auth.docker.io/token"
    auth_uri_full="${auth_uri}?service=registry.docker.io&scope=repository:${img_full}:pull"

    # If the user is logged in with Docker, this should return the Auth token?
    token=$(curl -s ${auth_uri_full} | jq -r .token)

    # grep -Po '"'"token"'"\s*:\s*"\K([^"]*)')
    #echo $token
fi

reg_uri_manifest="https://${registry}/v2/${img_full}/manifests/${tag}"
reg_uri_blobs="https://${registry}/v2/${img_full}/blobs"

# Layers
layers_raw=$(curl -s -H "Authorization: Bearer ${token}" "${reg_uri_manifest}" | jq -r .fsLayers[].blobSum)
# grep -Po '"'"blobSum"'"\s*:\s*"\K([^"]*)')
#echo "$reply"

layers=$(echo ${layers_raw} | tr ' ' '\n' | tac | uniq)
# Layers may be strangely stacked and hashes may repeat further up,
# download only fully unique layer IDs.
layers_dl=$(echo ${layers_raw} | tr ' ' '\n' | sort | uniq)

##############################################
# Download
##############################################

for HASHLAYER in ${layers_dl}; do
	hashtype=${HASHLAYER%:*}
	layer=${HASHLAYER#*:}
	hashtype_aria=$(echo ${hashtype} | sed 's/^\([a-z]*\)\([0-9]*\)$/\1-\2/')
	echo ${reg_uri_blobs}/${HASHLAYER}
	echo "  checksum=${hashtype_aria}=${layer}"
	echo "  out=${HASHLAYER}.tar.gz"
done | aria2c -i - -d ${cachedir} --header="Authorization: Bearer ${token}" -V


##############################################
# Extract and Clean
##############################################

for HASHLAYER in ${layers}; do

	layer="${cachedir}/${HASHLAYER}.tar.gz"

        # Call blob2oci to handle the layer
        if [ "${writable_dirs}" == true ]; then
            exec "${HERE}/blob2oci" --layer "$layer" --extract "${imgroot}" --writable-dirs
        else
            exec "${HERE}/blob2oci" --layer "$layer" --extract "${imgroot}"
        fi
done
