#!/bin/bash

# dockerhub2oci - Simple shell tool to pull from DockerHub and create an OCI image.
# Copyright (C) 2018  Oliver Freyermuth
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

function help() {
cat <<EOF
Tool to pull an image from a docker registry and extract the contents
to a folder to be used as OCI image.

Example usage:
$0 --repo gliderlabs --image alpine --tag latest
EOF
exit 1
}

# Defaults
registry="registry.hub.docker.com"
repo="gliderlabs"
image="alpine"
tag="latest"

cachedir=${TMPDIR:-/tmp}/docker2oci/

TEMP=$(getopt -o h --long repo:,image:,tag:,help -n $0 -- "$@")
if [ $? != 0 ] ; then printHelp; exit 1; fi
eval set -- "$TEMP"
while true ; do
	case "$1" in
		--repo)     repo=$2;     shift 2;;
		--image)    image=$2;    shift 2;;
		--tag)      tag=$2;      shift 2;;
		--cachedir) cachedir=$2; shift 2;;
		-h|--help)  help;        exit 0;;
		--)         shift;       break;;
		*) echo "Internal error!"; exit 1;;
	esac
done

mkdir -p ${cachedir}

imgroot=${repo}/${image}/${tag}
rm -rf ${imgroot}
mkdir -p ${imgroot}

img_full="${repo}/${image}"

auth_uri="https://auth.docker.io/token"
auth_uri_full="${auth_uri}?service=registry.docker.io&scope=repository:${img_full}:pull"

reg_uri_manifest="https://${registry}/v2/${img_full}/manifests/${tag}"
reg_uri_blobs="https://${registry}/v2/${img_full}/blobs"

# Auth token
token=$(curl -s ${auth_uri_full} | jq -r .token)
# grep -Po '"'"token"'"\s*:\s*"\K([^"]*)')
#echo $token

# Layers
layers=$(curl -s -H "Authorization: Bearer ${token}" "${reg_uri_manifest}" | jq -r .fsLayers[].blobSum)
# grep -Po '"'"blobSum"'"\s*:\s*"\K([^"]*)')
#echo "$reply"

layers_uniq=$(echo ${layers} | tr ' ' '\n' | sort | uniq)

for HASHLAYER in ${layers_uniq}; do
	hashtype=${HASHLAYER%:*}
	layer=${HASHLAYER#*:}
	hashtype_aria=$(echo ${hashtype} | sed 's/^\([a-z]*\)\([0-9]*\)$/\1-\2/')
	echo ${reg_uri_blobs}/${HASHLAYER}
	echo "  checksum=${hashtype_aria}=${layer}"
	echo "  out=${HASHLAYER}.tar.gz"
done | aria2c -i - -d ${cachedir} --header="Authorization: Bearer ${token}" -V

for HASHLAYER in ${layers}; do
	tar --overwrite --exclude=dev/* -C ${imgroot} -xf ${cachedir}/${HASHLAYER}.tar.gz
        # make sure all directories are owner-writable
        find ${imgroot} -type d ! -perm -200|xargs -r chmod u+w
done
